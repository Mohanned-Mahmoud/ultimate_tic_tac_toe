name: Backend Tests

on:
  workflow_dispatch: # Allows manual triggering
  push:name: Android Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  android-tests:
    name: Run Android Tests
    runs-on: ubuntu-latest

    steps:
      ### 🛠️ Step 1: Checkout the Repository
      - name: Checkout Code
        uses: actions/checkout@v3

      ### 🛠️ Step 2: Set Up Java Environment
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      ### 🛠️ Step 3: Set Up Android SDK
      - name: Set up Android SDK
        uses: android-actions/setup-android@v2

      ### 🛠️ Step 4: Grant Execute Permissions to Gradle Wrapper
      - name: Grant Execute Permissions to Gradle Wrapper
        run: chmod +x ./gradlew

      ### 🛠️ Step 5: Clean and Build the Project
      - name: Clean and Build Project
        run: ./gradlew clean build --stacktrace --debug

      ### 🛠️ Step 6: Run Instrumented Tests
      - name: Run Instrumented Tests on Android Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          target: google_apis
          arch: x86_64
          script: ./gradlew connectedAndroidTest --stacktrace --debug

      ### 🛠️ Step 7: Upload Test Results
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: android-test-results
          path: app/build/reports
          if-no-files-found: warn

      ### ✅ Step 8: Success Message
      - name: Success
        run: echo "✅ Android Tests Completed Successfully!"

    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  backend-inline-tests:
    name: Backend Inline Tests
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set Up Node.js Environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Step 3: Install Mocha and Chai
      - name: Install Testing Dependencies
        run: |
          npm install --save-dev mocha chai

      # Step 4: Create Inline Test Script
      - name: Create Backend Test Script
        run: |
          echo "const { expect } = require('chai');" > inlineTest.js
          echo "describe('Backend Inline Tests', () => {" >> inlineTest.js
          echo "  it('should make a valid move', () => {" >> inlineTest.js
          echo "    const board = [[" >> inlineTest.js
          echo "      [null, null, null]," >> inlineTest.js
          echo "      [null, null, null]," >> inlineTest.js
          echo "      [null, null, null]" >> inlineTest.js
          echo "    ]];" >> inlineTest.js
          echo "    const move = { row: 1, col: 1, player: 'X' };" >> inlineTest.js
          echo "    board[move.row][move.col] = move.player;" >> inlineTest.js
          echo "    expect(board[1][1]).to.equal('X');" >> inlineTest.js
          echo "  });" >> inlineTest.js
          
          echo "  it('should detect a win', () => {" >> inlineTest.js
          echo "    const board = [[" >> inlineTest.js
          echo "      ['X', 'X', 'X']," >> inlineTest.js
          echo "      [null, null, null]," >> inlineTest.js
          echo "      [null, null, null]" >> inlineTest.js
          echo "    ];" >> inlineTest.js
          echo "    const isWin = board[0].every(cell => cell === 'X');" >> inlineTest.js
          echo "    expect(isWin).to.be.true;" >> inlineTest.js
          echo "  });" >> inlineTest.js
          
          echo "  it('should detect a draw', () => {" >> inlineTest.js
          echo "    const board = [[" >> inlineTest.js
          echo "      ['X', 'O', 'X']," >> inlineTest.js
          echo "      ['O', 'X', 'O']," >> inlineTest.js
          echo "      ['O', 'X', 'O']" >> inlineTest.js
          echo "    ];" >> inlineTest.js
          echo "    const isDraw = board.flat().every(cell => cell !== null);" >> inlineTest.js
          echo "    expect(isDraw).to.be.true;" >> inlineTest.js
          echo "  });" >> inlineTest.js
          echo "});" >> inlineTest.js

      # Step 5: Run the Inline Tests
      - name: Run Inline Backend Tests
        run: npx mocha inlineTest.js

      # Step 6: Upload Test Results
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: backend-inline-test-results
          path: ./inlineTest.js
          if-no-files-found: warn

      # Step 7: Success Message
      - name: Success
        run: echo "✅ Backend Inline Tests Completed Successfully!"
